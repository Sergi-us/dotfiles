# SARBS lf-Einstellungen
## 2025-07-26   SARBS

# TODO - auf / binden
# TODO Funktion zum einf√ºgen aus der Zwischenablage erstellen. z.B. Bilder vom Snipping tool oder Text in ne textdatei...
# TODO f√ºr mimeopen eine m√∂glichkeit zum abbrechen einrichten (ESC)
# TODO in mimeopen <o> *.webm hinzuf√ºgen

# Hinweis zu Bildvorschauen
# F√ºr diejenigen, die Bildvorschauen w√ºnschen, wie dieses System, gibt es vier Schritte zur
# Einrichtung. Diese werden f√ºr LARBS-Benutzer automatisch durchgef√ºhrt, aber ich werde sie
# hier f√ºr andere erw√§hnen, die es manuell einrichten.
#
# 1. ueberzug muss installiert sein.
# 2. Die Scope-Datei (~/.config/lf/scope f√ºr mich) muss einen Befehl √§hnlich
#    meinem enthalten, um ueberzug-Bilder zu generieren.
# 3. Eine `set cleaner`-Zeile wie unten ist ein Cleaner-Skript.
# 4. lf sollte √ºber ein Wrapper-Skript (~/.local/bin/lfub f√ºr mich) gestartet werden,
#    das die Umgebung f√ºr ueberzug erstellt. Dieser Befehl kann in Ihrer shellrc
#    als Alias gesetzt werden (`alias lf="lfub") oder, wenn er an eine Taste gebunden ist,
#    sollte er direkt anstelle des normalen lf aufgerufen werden.

## 2025-01-08   funktion f√ºr Bildkomprimierung hinzugef√ºgt (bild-80-komprimieren) ben√∂tigt 'imagemagick' Trigger 'Pk'

# ==== Git Integration ====
# Custom prompt mit Git-Info (mit alternativen Symbolen)
cmd on-cd &{{
    # Git branch und Status
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        branch=$(git branch --show-current 2>/dev/null)

        # Hole Git-Status
        status=$(git status --porcelain 2>/dev/null)

        # Einfache Pr√ºfung ob es √Ñnderungen gibt
        if [ -n "$status" ]; then
            # Rot mit * wenn uncommitted changes
            git_status=" \033[31mÓ∞å ${branch} \033[0m"
        else
            # Gr√ºn wenn alles sauber
            git_status=" \033[32mÓú• ${branch} \033[0m"
        fi
    else
        git_status=""
    fi

    # Update prompt
    lf -remote "send $id set promptfmt \"\033[32;1m%u@%h\033[0m:\033[34;1m%d\033[0m$git_status\033[1m%f\033[0m\""
}}

# Git Status Befehl (ohne Nerd Fonts)
cmd git-status ${{
    clear
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo -e "\033[33m=== Git Repository Status ===\033[0m"
        echo ""
        echo -e "Branch: \033[36m$(git branch --show-current)\033[0m"

        # Remote Status
        remote=$(git remote -v | head -1 | awk '{print $2}')
        [ -n "$remote" ] && echo -e "Remote: \033[34m$remote\033[0m"

        # Letzter Commit
        last_commit=$(git log -1 --pretty=format:"%h %s" 2>/dev/null)
        [ -n "$last_commit" ] && echo -e "Letzter Commit: \033[35m$last_commit\033[0m"

        echo ""
        echo -e "\033[33mDateistatus:\033[0m"

        # Status mit einfachen Symbolen
        git status -s | while read -r line; do
            status="${line:0:2}"
            file="${line:3}"

            case "$status" in
                "??") echo -e "[?] \033[90m$file\033[0m";;      # Untracked
                " M") echo -e "[M] \033[33m$file\033[0m";;      # Modified
                "M ") echo -e "[+] \033[32m$file\033[0m";;      # Staged
                "MM") echo -e "[¬±] \033[33m$file\033[0m";;      # Modified + Staged
                "A ") echo -e "[A] \033[32m$file\033[0m";;      # Added
                "D ") echo -e "[D] \033[31m$file\033[0m";;      # Deleted
                "R ") echo -e "[R] \033[34m$file\033[0m";;      # Renamed
                *) echo -e "    $line";;
            esac
        done

        # Stash Info
        stash_count=$(git stash list 2>/dev/null | wc -l)
        [ "$stash_count" -gt 0 ] && echo -e "\nStashes: \033[33m$stash_count\033[0m"

    else
        echo "Kein Git-Repository"
    fi
    echo ""
    read -p "Enter dr√ºcken zum Fortfahren..."
}}

# Git Log mit Graph
cmd git-log ${{
    clear
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        git log --graph --pretty=format:'%C(yellow)%h%C(reset) %C(cyan)%d%C(reset) %s %C(green)(%cr) %C(blue)<%an>%C(reset)' --abbrev-commit -20 | less -R
    else
        echo "Kein Git-Repository"
        read -p "Enter dr√ºcken..."
    fi
}}

# Git Diff f√ºr aktuelle Datei
cmd git-diff ${{
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        git diff --color=always "$f" | less -R
    else
        echo "Kein Git-Repository"
        read -p "Enter dr√ºcken..."
    fi
}}

# Git Add mit Feedback
cmd git-add ${{
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        if [ -n "$f" ]; then
            git add "$f"
            lf -remote "send $id echo \"[Git] Hinzugef√ºgt: $(basename $f)\""
            lf -remote "send $id reload"
        else
            echo "Keine Datei ausgew√§hlt"
            read -p "Enter dr√ºcken..."
        fi
    else
        echo "Kein Git-Repository"
        read -p "Enter dr√ºcken..."
    fi
}}

# Git Reset mit Feedback
cmd git-reset ${{
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        if [ -n "$f" ]; then
            git reset HEAD "$f"
            lf -remote "send $id echo \"[Git] Zur√ºckgesetzt: $(basename $f)\""
            lf -remote "send $id reload"
        else
            echo "Keine Datei ausgew√§hlt"
            read -p "Enter dr√ºcken..."
        fi
    else
        echo "Kein Git-Repository"
        read -p "Enter dr√ºcken..."
    fi
}}

# Git Commit mit Editor
cmd git-commit ${{
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        # Pr√ºfe ob es staged changes gibt
        if [ -n "$(git diff --cached --name-only)" ]; then
            git commit
            lf -remote "send $id reload"
        else
            echo "Keine √Ñnderungen zum Committen (nichts staged)"
            echo ""
            echo "Nutze '√∂a' um Dateien zu stagen"
            read -p "Enter dr√ºcken..."
        fi
    else
        echo "Kein Git-Repository"
        read -p "Enter dr√ºcken..."
    fi
}}

# Git Push mit Status
cmd git-push ${{
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo "Pushe zu Remote..."
        if git push 2>&1; then
            lf -remote "send $id echo \"[Git] Erfolgreich gepusht\""
        else
            echo ""
            echo "Push fehlgeschlagen. M√∂glicherweise musst du erst pullen."
            read -p "Enter dr√ºcken..."
        fi
    else
        echo "Kein Git-Repository"
        read -p "Enter dr√ºcken..."
    fi
}}

# Git Pull mit Status
cmd git-pull ${{
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo "Pulle von Remote..."
        if git pull 2>&1; then
            lf -remote "send $id echo \"[Git] Erfolgreich gepullt\""
            lf -remote "send $id reload"
        else
            echo ""
            echo "Pull fehlgeschlagen"
            read -p "Enter dr√ºcken..."
        fi
    else
        echo "Kein Git-Repository"
        read -p "Enter dr√ºcken..."
    fi
}}

# Magit Integration
cmd git-magit ${{
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        nvim -c MagitOnly
    else
        echo "Kein Git-Repository"
        read -p "Enter dr√ºcken..."
    fi
}}

# Git Add All (alle √Ñnderungen)
cmd git-add-all ${{
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        git add -A
        lf -remote "send $id echo \"[Git] Alle √Ñnderungen hinzugef√ºgt\""
        lf -remote "send $id reload"
    else
        echo "Kein Git-Repository"
        read -p "Enter dr√ºcken..."
    fi
}}

cmd git-add-interactive ${{
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        # Zeige alle untracked und modified files zur Auswahl
        files=$(git status -s | grep -E "^\?\?| M" | cut -c4- | fzf -m --prompt="Dateien zum Stagen> ")
        if [ -n "$files" ]; then
            echo "$files" | while IFS= read -r file; do
                git add "$file"
                echo "Hinzugef√ºgt: $file"
            done
            read -p "Enter dr√ºcken..."
            lf -remote "send $id reload"
        fi
    else
        echo "Kein Git-Repository"
        read -p "Enter dr√ºcken..."
    fi
}}

# === Hauptbefehle/Funktionen ===
# Sync zum Dell - Mirror-Modus (l√∂scht nicht vorhandene Dateien)
cmd sync-to-dell ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Sync zu Dell..."
    for item in $fx; do
        echo "‚Üí $(basename "$item")"
        rsync -avzP --delete --relative "$item" dell:~/
    done
    echo "Fertig!"
    read dummy
}}

cmd convert_yt ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    notify-send "Video wird f√ºr YouTube konwertiert..."
    for x in $fx; do
        if convert-yt "$x"; then
            lf -remote "send $id reload"
            notify-send "üéµ Erfolgreich" "Datei $x wurde konvertiert."
        else
            notify-send "‚ùå Fehler" "Datei $x konnte nicht konvertiert werden."
        fi
    done
    notify-send "‚úÖ Verarbeitung abgeschlossen."
}}

cmd convert_audio ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    notify-send "Audio wird konvertiert..."
    for x in $fx; do
        if convert-audio "$x"; then
            lf -remote "send $id reload"
            notify-send "üéµ Erfolgreich" "Datei $x wurde konvertiert."
        else
            notify-send "‚ùå Fehler" "Datei $x konnte nicht konvertiert werden."
        fi
    done
    notify-send "‚úÖ Verarbeitung abgeschlossen."
}}

# Video umwandeln (f√ºr Camaufnahmen)
cmd convert_video ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    notify-send "Video wird konvertiert..."
    for x in $fx; do
        if convert-video "$x"; then
            lf -remote "send $id reload"
            notify-send "üéµ Erfolgreich" "Datei $x wurde konvertiert."
        else
            notify-send "‚ùå Fehler" "Datei $x konnte nicht konvertiert werden."
        fi
    done
    notify-send "‚úÖ Verarbeitung abgeschlossen."
}}

# √ñffnungsbefehl f√ºr verschiedene Dateitypen:
# setsid -f     # sorgt daf√ºr dass es in einem neuen Terminal ge√∂ffnet wird!!
cmd open ${{
    # Ermittlung des MIME-Typs
    mime=$(file --mime-type "$(readlink -f $f)" -b)
    # Verschiedene Case √∂ffnungsszenarien
    case $mime in
        # Office Open XML Tabellen
        application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)
            localc $fx ;;
        # Dokumente: PDF, DjVu, PostScript
        image/vnd.djvu|application/pdf|application/postscript)
            setsid -f zathura $fx >/dev/null 2>&1 ;;
        # Textdateien, JSON, leere Dateien, Untertitel
        text/*|application/json|inode/x-empty|application/x-subrip)
            $EDITOR $fx ;;
        # GIMP-Dateien
        image/x-xcf)
            setsid -f gimp $f >/dev/null 2>&1 ;;
        # SVG-Bilder
        image/svg+xml)
            display -- $f ;;
        # Andere Bilder: Filter und Auswahl √ºber lf
        image/*)
            rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|avif\|tif\|ico\)\(_large\)*$" |
            setsid -f nsxiv -aio 2>/dev/null | while read -r file; do
                [ -z "$file" ] && continue
                lf -remote "send select \"$file\""
                lf -remote "send toggle"
            done &
            ;;
        # Audio und ASF-Videos
        audio/*|video/x-ms-asf)
            mpv --audio-display=no $f ;;
        # Andere Videos
        video/*)
            mpv $f -quiet >/dev/null 2>&1 ;;
        # PDF, DjVu, EPUB nochmal
        application/pdf|application/vnd.djvu|application/epub*)
            setsid -f zathura $fx >/dev/null 2>&1 ;;
        # PGP-verschl√ºsselte Dateien
        application/pgp-encrypted)
            $EDITOR $fx ;;
        # Office-Dokumente (mehrere Formate)
            application/vnd.openxmlformats-officedocument.wordprocessingml.document|\
            application/vnd.oasis.opendocument.text|\
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|\
            application/vnd.oasis.opendocument.spreadsheet|\
            application/vnd.oasis.opendocument.spreadsheet-template|\
            application/vnd.openxmlformats-officedocument.presentationml.presentation|\
            application/vnd.oasis.opendocument.presentation-template|\
            application/vnd.oasis.opendocument.presentation|\
            application/vnd.ms-powerpoint|\
            application/vnd.oasis.opendocument.graphics|\
            application/vnd.oasis.opendocument.graphics-template|\
            application/vnd.oasis.opendocument.formula|\
            application/vnd.oasis.opendocument.database)
                setsid -f libreoffice $fx >/dev/null 2>&1 ;;
        # Generische Bin√§rdateien anhand der Endung
        application/octet-stream)
            case ${f##*.} in
                doc|docx|xls|xlsx|odt|ppt|pptx)
                    setsid -f libreoffice $fx >/dev/null 2>&1 ;;
                ghw)
                    setsid -f gtkwave $f >/dev/null 2>&1 ;;
                ts)
                    setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
                *)
                    setsid -f zathura $fx >/dev/null 2>&1 ;;
            esac ;;
        # Standardfall: √ñffnen mit dem Standardprogramm
        *)
            for f in $fx; do
                setsid -f $OPENER $f >/dev/null 2>&1
            done ;;
    esac
}}

# Verzeichnisse erstellen (mit Unterverzeichnissen)
cmd mkdir $mkdir -p "$@"

# Archivdateien extrahieren (zip, tar, etc.) mit Best√§tigungsdialog
cmd extract ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "Extrahieren?[y/N]"
	read ans
	[ $ans = "y" ] && {
		case $fx in
			*.tar.bz2)   tar xjf $fx     ;;
			*.tar.gz)    tar xzf $fx     ;;
			*.bz2)       bunzip2 $fx     ;;
			*.rar)       unrar e $fx     ;;
			*.gz)        gunzip $fx      ;;
			*.tar)       tar xf $fx      ;;
			*.tbz2)      tar xjf $fx     ;;
			*.tgz)       tar xzf $fx     ;;
			*.zip)       unzip $fx       ;;
			*.Z)         uncompress $fx  ;;
			*.7z)        7z x $fx        ;;
			*.tar.xz)    tar xf $fx      ;;
			*.img.xz)    xz -d $fx       ;;
		esac
	}
}}

# Dateien sicher l√∂schen mit Best√§tigungsdialog
cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "L√∂schen?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
}}

# Dateien verschieben mit fzf-Zielauswahl
cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Wohin verschieben?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest\"
	done &&
	notify-send "üöö Datei(en) verschoben." "Datei(en) wurden nach $dest verschoben."
}}

# Bilder in der Gr√∂√üe reduzieren und mit Pr√§fix speichern
cmd bild-80-komprimieren ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    notify-send "Bilder werden komprimiert..."
    files="${fx:-$f}"
    for x in $fx; do
        output="${x%.*}_komprimiert-80.${x##*.}"
        if magick "$x" -quality 80 "$output"; then
            notify-send "ÔÄæ Erfolgreich" "Bild $x wurde als $output gespeichert."
        else
            notify-send "‚ùåFehler" "Bild $x konnte nicht verarbeitet werden."
        fi
    done
    notify-send "‚úÖ Verarbeitung abgeschlossen." "Alle ausgew√§hlten Bilder wurden bearbeitet."
}}

# Dateien kopieren mit fzf-Zielauswahl
cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Wohin kopieren?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send "üìã Datei(en) kopiert." "Datei(en) wurden nach $dest kopiert."
}}

cmd setbg "$1"

# Mehrere Dateien gleichzeitig umbenennen
cmd bulkrename ${{
	tmpfile_old="$(mktemp)"
	tmpfile_new="$(mktemp)"

	[ -n "$fs" ] && fs=$(basename -a $fs) || fs=$(ls)

	echo "$fs" > "$tmpfile_old"
	echo "$fs" > "$tmpfile_new"
	$EDITOR "$tmpfile_new"

	[ "$(wc -l < "$tmpfile_old")" -eq "$(wc -l < "$tmpfile_new")" ] || { rm -f "$tmpfile_old" "$tmpfile_new"; exit 1; }

	paste "$tmpfile_old" "$tmpfile_new" | while IFS="$(printf '\t')" read -r src dst
	do
		[ "$src" = "$dst" ] || [ -e "$dst" ] || mv -- "$src" "$dst"
	done

	rm -f "$tmpfile_old" "$tmpfile_new"
	lf -remote "send $id unselect"
}}

# Musik auf das Android Handy kopieren
cmd Handy-Musik ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Wohin auf das Handy √ºbertragen?"
	dest="/sdcard/Music"  # Standardzielordner auf dem Handy
	for x in $fx; do
		adb push "$x" "$dest" &&
		notify-send "Ôê¨ Datei √ºbertragen." "Datei/Verzeichniss $x wurde auf das Handy kopiert, ziel Musik."
	done
}}

# Dateien oder Verzeichnisse auf's Android Handy √ºbertragen (in Downloads)
cmd Handy-Downloads ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Wohin auf das Handy √ºbertragen?"
	dest="/sdcard/Download"  # Standardzielordner auf dem Handy
	for x in $fx; do
		adb push "$x" "$dest" &&
		notify-send "Ôê¨ Datei √ºbertragen." "Datei/Verzeichniss $x wurde auf das Handy kopiert ziel Downloads."
	done
}}

# Testversionen f√ºr die Taste o und O
cmd mimeopen_default &{{mimeopen "$f"}}
cmd mimeopen_ask ${{mimeopen --ask "$f"}}

# F√ºhre on-cd beim Start aus
on-cd

# === Grundlegende Einstellungen ===
	set shellopts '-eu'     # Shell-Optionen: e=exit on error, u=error on undefined variables
	set ifs "\n"            # Internal Field Separator auf Newline setzen
	set scrolloff 10        # 10 Zeilen Abstand beim Scrollen zum Rand beibehalten
	set icons               # Aktiviert die Anzeige von Icons
	set period 1            # Aktualisierungsintervall in Sekunden
	set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
	set cleaner '~/.config/lf/cleaner'
	set previewer '~/.config/lf/scope'
	set autoquit true       # Beendet lf automatisch beim √ñffnen einer Datei

# ===TASTENBELEGUNGEN ===
# === s menu (Selektion) ===
map sc clear
# und weitere Sortierfunktionen

# === Sync funktionen f√ºr ssh verbundene Rechner ===
map Sd sync-to-dell

# === A Menu f√ºr Kopieraktionen mit ADB-Push auf ein Android Handy (Entwickleroptionen und ADB) ===
map Ad Handy-Downloads
map Am Handy-Musik

# === P Menu f√ºr Bildbearbeitung ===
map Pk bild-80-komprimieren

# === R Menu f√ºr Videobearbeitung ===
map Rx convert_audio
map Rv convert_video
map Ry convert_yt

# === Navigieren ===
map <c-f> $lf -remote "send $id select \"$(fzf --height=-10)\"" # <Strg+f> Dateisuche mit fzf

# <J> Wechselt zum Lesezeichen aus "bm-dirs"
map J $lf -remote "send $id cd $(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf)"

# <H> Wechselt zum Home-Verzeichniss
map H cd ~
map g top
map - search

# === Dateioperationen ===
map D delete                # <D> L√∂schen                (delete)
map E extract               # <E> Archiv extrahieren     (extract)
map C copyto                # <C> Kopieren nach...       (copy)
map M moveto                # <M> Verschieben nach...    (move)
map <c-n> push :mkdir<space>""<left>	# <Strg+n> = Neues Verzeichniss erstellen
map <c-r> reload            # <Strg+r> = Reload (Ansicht neu laden)
map <tab> reload
map <c-s> set hidden!       # <Strg+s> = Versteckte Dateien An/Aus-blenden
map B bulkrename            # <B> = Startet die Massenumbenennung f√ºr mehrere ausgew√§hlte Dateien.
map b $setbg $f             # <b> = Setzt die ausgew√§hltes Bild als Hintergrund.

# === Dateibearbeitung ===
map <enter> shell           # <Enter> Shell im aktuellen Verzeichniss √∂ffnen
map x $$f                   # <x> F√ºhrt Datei als Befehl aus.
map X !$f                   # <X> F√ºhrt Datei als Befehl aus und wartet auf Beendigung.
map T $nsxiv -t "$(pwd)"    # <T> √∂ffnet den Thumbnailmodus f√ºr Bilder
map o &mimeopen "$f"        # <o> √ñffnet die Datei mit dem Standard-Programm.
map O $mimeopen --ask "$f"  # <O> Fragt, mit welchem Programm die Datei ge√∂ffnet werden soll.
## map o mimeopen_default   # <o> √ñffnet die Datei mit dem Standard-Programm in einem neuen Terminal
## map O mimeopen_ask       # <O> Fragt, mit welchem Programm die Datei ge√∂ffnet werden soll
map V push :!nvim<space>    # <V> √ñffnet vim im aktuellen Verzeichnis
map W $setsid -f $TERMINAL >/dev/null 2>&1	# W = √ñffnet ein neues Terminal-Fenster im aktuellen Verzeichnis
    # <Strg+y> Ausf√ºhrungsrechte f√ºr ausgew√§hlte Dateien entziehen
map <c-y> $for f in $fx; do chmod -x "$f"; done && lf -remote "send $id reload" && lf -remote "send $id unselect"
    # <Strg+x> Ausf√ºhrungsrechte f√ºr ausgew√§hlte Dateien geben
map <c-x> $for f in $fx; do chmod +x "$f"; done && lf -remote "send $id reload" && lf -remote "send $id unselect"

# === Umbenennen ===
map c push A<c-u>           # c = Startet eine neue Umbenennung, l√∂scht den vorhandenen Namen.
map i :rename; cmd-home     # I = Startet die Umbenennung am Anfang des Dateinamens.
map I :rename               # i = Startet die Umbenennung vor der Dateierweiterung.
map a :rename; cmd-right    # a = Startet die Umbenennung nach der Dateierweiterung.

# === Zwischenablage ===
map U $printf "%s" "$fx" | xclip -selection clipboard	# U: Vollst√§ndiger Pfad in Zwischenablage
map u $printf "%s" "$fx" | sed 's/.*\///' | xclip -selection clipboard	# u: Nur Dateiname in Zwischenablage
# . (Punkt) 	Extrahiert eine YouTube-URL aus dem Dateinamen und kopiert sie in die Zwischenablage
# map . $printf "%s" "$fx" | sed -E 's/^.+\[/https:\/\/www.youtube.com\/watch?v=/' | sed -E 's/\]\..+//' | xclip -selection clipboard
# (Gr√∂√üer-als-Zeichen): √Ñhnlich wie der vorherige Befehl, aber f√ºr Piped (eine alternative YouTube-Frontend) URLs
map <gt> $printf "%s" "$fx" | sed -E 's/^.+\[/https:\/\/piped.video\/watch?v=/' | sed -E 's/\]\..+//' | xclip -selection clipboard
map <c-l> unselect          # <Strg+l> Hebt die Auswahl aller ausgew√§hlten Dateien auf

# === Git Befehle (g Men√º) ===
map √∂s git-status           # √∂s = Git Status (ausf√ºhrlich)
map √∂l git-log              # √∂l = Git Log mit Graph
map √∂d git-diff             # √∂d = Git Diff f√ºr aktuelle Datei
map √∂a git-add              # √∂a = Git Add aktuelle Datei
map √∂A git-add-all          # √∂A = Git Add alle √Ñnderungen
map √∂r git-reset            # √∂r = Git Reset aktuelle Datei
map √∂c git-commit           # √∂c = Git Commit
map √∂p git-push             # √∂p = Git Push
map √∂P git-pull             # √∂P = Git Pull
map √∂m git-magit            # √∂m = Magit √∂ffnen
map √∂i git-add-interactive  # √∂i = Interaktives Git Add mit fzf

# Lesezeichen einbinden
source "~/.config/lf/shortcutrc"
