#!/bin/bash
## 2025-03-12 SARBS
# TODO Die aufnahme und der Codex passt!!! Variable Bitrate und Opus testen

notify() {
    notify-send "$1"
}

updateicon() {
    echo "$1" > /tmp/recordingicon
    pkill -RTMIN+9 "${STATUSBAR:-dwmblocks}"
}

killrecording() {
    kill -SIGTERM "$(cat /tmp/recordingpid)" 2>/dev/null
    rm -f /tmp/recordingpid
    notify "Aufnahme beendet"
    updateicon ""
}

##### Version für Software Encoding
#screencast() {
#    local out="$HOME/Videos/scr/screencast-$(date '+%y%m%d-%H%M-%S').mp4"
#    ffmpeg -y \
#        -f x11grab -framerate 30 -video_size 2560x1440 -i "$DISPLAY" \
#        -f pulse -channels 2 -i default \
#        -c:v libx264 -crf 18 -preset medium \
#        -c:a aac -b:a 128k \
#        -pix_fmt yuv420p \
#        "$out" &
#    echo $! > /tmp/recordingpid
#    notify "Creencast gestartet"
#    updateicon "  "
#}

##### Version für Hardware Encoding mit h265_vaapi
## 2025-01-18 libra unterstützung einrichten (Thinkpad T480 Intel UHD Graphics 620)
## sudo pacman -S libva-intel-driver libva-utils (für Intel CPU's)
#screencast() {
#    local out="$HOME/Videos/scr/screencast-$(date '+%y%m%d-%H%M-%S').mp4"
#    ffmpeg -y \
#        -vaapi_device /dev/dri/renderD128 \
#        -f x11grab -framerate 30 -video_size 2560x1440 -i "$DISPLAY" \
#        -f pulse -channels 2 -i default \
#        -vf 'format=nv12,hwupload' \
#        -c:v hevc_vaapi -qp 20 -profile:v main \
#        -c:a aac -b:a 256k \
#        "$out" &
#    echo $! > /tmp/recordingpid
#    # notify "Screencast gestartet"
#    updateicon "  "
#}

##### Version für Hardware Encoding mit h265_vaapi
## Variable Bitrate für Video und AAC für Audio
## Mit höherer Qualität für Bearbeitung in DaVinci Resolve
## Der kritischste Parameter dürfte die minimale Bitrate (minrate) sein, die
## verhindert, dass die Qualität in komplexen Szenen zu stark abfällt.
screencast() {
    # Aktuelle Hauptbildschirmauflösung ermitteln
    local resolution
    resolution=$(xrandr --current | grep -w "primary" | grep -o '[0-9]*x[0-9]*' | head -n1)

    local out="$HOME/Videos/scr/screencast-$(date '+%y%m%d-%H%M-%S').mp4"
    nice -n -10 ffmpeg -y \
        -vaapi_device /dev/dri/renderD128 \
        -f x11grab -framerate 30 -video_size "$resolution" -i "$DISPLAY" \
        -probesize 10M -analyzeduration 10M \
        -f pulse -sample_rate 48000 -channels 2 -i default \
        -af "aresample=48000:async=1000" \
        -vf 'format=nv12,hwupload' \
        -c:v hevc_vaapi -b:v 4M -minrate 2M -maxrate 9M -bufsize 12M -profile:v main \
        -rc_mode 1 \
        -c:a aac -b:a 256k -ar 48000 \
        "$out" &
    echo $! > /tmp/recordingpid
    updateicon "  "
}

screencast_monitor() {
    # Monitor-Auswahl ohne Fehlermeldungen
    local selected_monitor
    selected_monitor="$(xrandr --listmonitors | tail -n +2 | awk '{print $4}' | dmenu -i -p "Monitor auswählen:")"

    # Wenn kein Monitor ausgewählt wurde, breche ab
    if [ -z "$selected_monitor" ]; then
        notify "Keine Monitorauswahl getroffen, Aufnahme abgebrochen."
        return 1
    fi

    # Auflösung und Offset für den ausgewählten Monitor ermitteln
    local resolution offset
    read -r resolution offset <<< $(xrandr | grep -w "$selected_monitor" | grep -o '[0-9]*x[0-9]*[+][0-9]*[+][0-9]*' | head -n1 | awk '{
        match($0, /([0-9]+)x([0-9]+)([+][0-9]+[+][0-9]+)/, a);
        print a[1]"x"a[2], a[3];
    }')

    local out="$HOME/Videos/scr/screencast-${selected_monitor}-$(date '+%y%m%d-%H%M-%S').mp4"

    nice -n -10 ffmpeg -y \
        -vaapi_device /dev/dri/renderD128 \
        -f x11grab -framerate 30 -video_size "$resolution" -i "$DISPLAY$offset" \
        -probesize 10M -analyzeduration 10M \
        -f pulse -sample_rate 48000 -channels 2 -i default \
        -af "aresample=48000:async=1000" \
        -vf 'format=nv12,hwupload' \
        -c:v hevc_vaapi -b:v 4M -minrate 2M -maxrate 9M -bufsize 12M -profile:v main \
        -rc_mode 1 \
        -c:a aac -b:a 256k -ar 48000 \
        "$out" &
    echo $! > /tmp/recordingpid
    updateicon "  "
}

audio() {
    local out="$HOME/Podcast/audio-$(date '+%y%m%d-%H%M-%S').flac"
    ffmpeg -f pulse -i default -c:a flac "$out" &
    echo $! > /tmp/recordingpid
    notify "Audioaufnahme gestartet"
    updateicon "  "
}

webcam() {
    local out="$HOME/Videos/webcam-$(date '+%y%m%d-%H%M-%S').mp4"
    ffmpeg -y \
        -f v4l2 -i "/dev/video0" \
        -c:v libx264 -crf 18 -preset medium \
        -pix_fmt yuv420p \
        "$out" &
    echo $! > /tmp/recordingpid
    notify "Webcamaufnahme gestartet"
    updateicon "  "
}

askrecording() {
    local choice
    choice="$(printf "Bildschirmaufnahme\nBildschirmaufnahme (Monitor)\nAudio\nWebcam" \
        | dmenu -i -p "Aufnahmestil wählen:")"
    case "$choice" in
        Bildschirmaufnahme) screencast ;;
        "Bildschirmaufnahme (Monitor)") screencast_monitor ;;
        Audio) audio ;;
        Webcam) webcam ;;
    esac
}

asktoend() {
    local response
    response="$(printf "Ja\nNein" | dmenu -i -p "Aufnahme läuft, beenden?")"
    [ "$response" = "Ja" ] && killrecording
}

case "$1" in
    screencast) screencast ;;
    screencast_monitor) screencast_monitor ;;
    audio) audio ;;
    webcam) webcam ;;
    kill) killrecording ;;
    *)
        ([ -f /tmp/recordingpid ] && asktoend) || askrecording
        ;;
esac
