#!/bin/sh
## 2025-07-11 SARBS - DEV
# Universelles Unmount-Skript mit Prozess-Management und HDD-Poweroff
# - Interaktive Prozess-Behandlung
# - Sync vor Unmount
# - HDD Power-Management
# - Kritische Benachrichtigungen

set -e

# Farben für dmenu (optional, falls dein dmenu das unterstützt)
DMENU_NORMAL="#ebdbb2"
DMENU_SELECT="#458588"

# Funktion für kritische Benachrichtigungen
notify_critical() {
    notify-send -u critical "$@"
}

# Funktion für normale Benachrichtigungen
notify_normal() {
    notify-send -u normal "$@"
}

# Prozesse anzeigen und optional beenden
handle_processes_using_directory() {
    directory=$1

    # Verwende fuser für bessere Performance
    process_pids=$(fuser -v "$directory" 2>&1 | awk 'NR>1 {print $2}' | grep -E '^[0-9]+$' || true)

    if [ -n "$process_pids" ]; then
        # Prozess-Details sammeln
        process_details=""
        for pid in $process_pids; do
            if [ -d "/proc/$pid" ]; then
                cmd=$(ps -p "$pid" -o comm= 2>/dev/null || echo "unbekannt")
                process_details="${process_details}PID $pid: $cmd\n"
            fi
        done

        if [ -n "$process_details" ]; then
            notify_normal "⚠️ Prozesse verwenden $directory" "$(echo -e "$process_details")"

            # Interaktive Abfrage
            action=$(echo -e "Prozesse sanft beenden (SIGTERM)\nProzesse erzwingen (SIGKILL)\nAbbrechen" | \
                     dmenu -i -p "Prozesse blockieren das Aushängen. Was tun?")

            case "$action" in
                "Prozesse sanft beenden"*)
                    echo "$process_pids" | xargs -r kill -15 2>/dev/null || true
                    sleep 2
                    # Prüfen ob noch Prozesse laufen
                    remaining=$(fuser -v "$directory" 2>&1 | awk 'NR>1 {print $2}' | grep -E '^[0-9]+$' || true)
                    if [ -n "$remaining" ]; then
                        notify_normal "⚠️ Einige Prozesse laufen noch" "Versuche SIGKILL..."
                        echo "$remaining" | xargs -r kill -9 2>/dev/null || true
                    fi
                    notify_normal "✓ Prozesse beendet" "Directory ist jetzt frei"
                    ;;
                "Prozesse erzwingen"*)
                    echo "$process_pids" | xargs -r kill -9 2>/dev/null || true
                    notify_critical "⚠️ Prozesse gekillt" "Du Monster! 👹"
                    ;;
                "Abbrechen")
                    notify_normal "Abgebrochen" "Unmount wurde abgebrochen"
                    exit 0
                    ;;
            esac
        fi
    fi
}

# Prüft ob Gerät eine rotierende HDD ist
is_rotating_disk() {
    device=$1
    # Entferne partition nummer falls vorhanden (sda1 -> sda)
    base_device=$(echo "$device" | sed 's/[0-9]*$//')

    if [ -f "/sys/block/${base_device}/queue/rotational" ]; then
        rotational=$(cat "/sys/block/${base_device}/queue/rotational" 2>/dev/null || echo "0")
        [ "$rotational" = "1" ]
    else
        false
    fi
}

# HDD sicher herunterfahren
poweroff_hdd() {
    device=$1
    base_device=$(echo "$device" | sed 's/[0-9]*$//')

    notify_normal "💾 HDD wird heruntergefahren..." "/dev/${base_device}"

    # Erst sync, dann hdparm
    sync
    if command -v hdparm >/dev/null 2>&1; then
        sudo -A hdparm -Y "/dev/${base_device}" 2>/dev/null || true
        notify_normal "✓ HDD heruntergefahren" "/dev/${base_device} ist jetzt im Standby"
    else
        notify_critical "⚠️ hdparm nicht installiert" "HDD konnte nicht heruntergefahren werden"
    fi
}

# Hauptskript
mounteddroids="$(grep simple-mtpfs /etc/mtab 2>/dev/null | awk '{print "📱" $2}' || true)"
lsblkoutput="$(lsblk -nrpo "name,type,size,mountpoint" 2>/dev/null || true)"
mounteddrives="$(echo "$lsblkoutput" | awk '($2=="part"||$2=="crypt")&&$4!~/\/boot|\/home$|SWAP/&&length($4)>1{printf "💾%s (%s)\n",$4,$3}')"

allunmountable="$(echo "$mounteddroids
$mounteddrives" | sed "/^$/d;s/ *$//")"

if [ -z "$allunmountable" ]; then
    notify_normal "Keine Laufwerke zum Aushängen" "Es sind keine aushängbaren Laufwerke eingehängt"
    exit 1
fi

chosen="$(echo "$allunmountable" | dmenu -i -p "Welches Laufwerk aushängen?")"
[ -z "$chosen" ] && exit 0

chosen="${chosen%% *}"
# Verzeichnispfad extrahieren
mountpoint="/${chosen#*/}"

# Prozesse behandeln
handle_processes_using_directory "$mountpoint"

# Sync durchführen mit Benachrichtigung
notify_normal "🔄 Synchronisiere Daten..." "Stelle sicher, dass alle Daten geschrieben sind"
sync

# Device-Name für HDD-Check ermitteln
device_name=$(findmnt -n -o SOURCE "$mountpoint" 2>/dev/null | sed 's/.*\///' || true)

# Laufwerk aushängen
if sudo -A umount -l "$mountpoint" 2>/dev/null; then
    notify_normal "✓ Gerät ausgehängt" "$chosen wurde erfolgreich ausgehängt"
else
    notify_critical "❌ Fehler beim Aushängen" "Konnte $chosen nicht aushängen"
    exit 1
fi

# LUKS schließen falls verschlüsselt
cryptid="$(echo "$lsblkoutput" | grep "/${chosen#*/}$" | awk '{print $1}' || true)"
if [ -n "$cryptid" ] && [ -b "/dev/mapper/${cryptid##*/}" ]; then
    if sudo -A cryptsetup close "${cryptid##*/}" 2>/dev/null; then
        notify_normal "🔒 Verschlüsselung geschlossen" "LUKS-Container ist wieder sicher verschlossen"
    fi
fi

# HDD herunterfahren falls es eine rotierende Disk ist
if [ -n "$device_name" ] && is_rotating_disk "$device_name"; then
    # Frage ob HDD heruntergefahren werden soll
    if echo -e "Ja\nNein" | dmenu -i -p "HDD herunterfahren?" | grep -q "Ja"; then
        poweroff_hdd "$device_name"
    fi
fi

# Finale Bestätigung
notify_normal "✅ Vorgang abgeschlossen" "Das Gerät kann jetzt sicher entfernt werden"
