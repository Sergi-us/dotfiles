#!/usr/bin/env bash
# dotfiles-sarbs - Dotfiles Management Tool
# 2025-01-09 SARBS DEV V9 - KISS Edition mit fzf + Preview
# Verwaltet öffentliche und private Dotfiles mit Hardlinks
#
# FÜR ANFÄNGER: Teste erstmal mit --dry-run Flag!
# Beispiel: ./dotfiles-sarbs -d --dry-run

set -euo pipefail

# Konstanten
readonly PUBLIC_DIR="$(pwd)"
readonly PRIVATE_DIR="$HOME/.local/src/dotfiles-privat"
readonly TARGET_DIR="$HOME"
readonly MARKER_FILE=".dotfiles-marker"
readonly GIT_BRANCH="main"
readonly VERSION="9.0"

# Ausschluss-Muster für rsync
readonly EXCLUDES=(
    ".git/"
    ".gitignore"
    ".gitattributes"
    ".github/"
    "LICENSE*"
    "FUNDING*"
    "*.bac"
    "*.~*~"
    "$MARKER_FILE"
)

# Flags
QUIET=false
FORCE=false
DRY_RUN=false

# Hilfsfunktionen
log() {
    [[ "$QUIET" == false ]] && echo "$@"
}

fehler() {
    echo "Fehler: $1" >&2
    exit 1
}

validiere_verzeichnis() {
    local dir="$1"
    local name="$2"
    [[ -f "$dir/$MARKER_FILE" ]] || fehler "$name fehlt Marker-Datei: $dir/$MARKER_FILE"
}

erstelle_privates_verzeichnis() {
    if [[ ! -d "$PRIVATE_DIR" ]]; then
        log "Erstelle privates Verzeichnis: $PRIVATE_DIR"
        mkdir -p "$PRIVATE_DIR"
        touch "$PRIVATE_DIR/$MARKER_FILE"
    fi
}

baue_rsync_kommando() {
    local src="$1"
    local dest="$2"
    local cmd="rsync -avh --link-dest='$src'"

    [[ "$DRY_RUN" == true ]] && cmd="$cmd --dry-run"

    for pattern in "${EXCLUDES[@]}"; do
        cmd="$cmd --exclude='$pattern'"
    done

    cmd="$cmd '$src/' '$dest/'"
    echo "$cmd"
}

# Hauptfunktionen
hardlinks_oeffentlich() {
    log "Erstelle Hardlinks (öffentlich)..."
    validiere_verzeichnis "$PUBLIC_DIR" "Öffentliches Verzeichnis"

    local cmd=$(baue_rsync_kommando "$PUBLIC_DIR" "$TARGET_DIR")
    [[ "$QUIET" == true ]] && cmd="${cmd//-avh/-aq}"
    eval "$cmd"

    [[ "$DRY_RUN" == true ]] && log "⚠️  DRY-RUN - Nichts wurde verändert!"
    log "✓ Hardlinks erstellt: $PUBLIC_DIR → $TARGET_DIR"
}

kopiere_dotfiles() {
    log "Kopiere Dotfiles..."
    validiere_verzeichnis "$PUBLIC_DIR" "Öffentliches Verzeichnis"

    local cmd="rsync -avh"
    [[ "$DRY_RUN" == true ]] && cmd="$cmd --dry-run"

    for pattern in "${EXCLUDES[@]}"; do
        cmd="$cmd --exclude='$pattern'"
    done
    cmd="$cmd '$PUBLIC_DIR/' '$TARGET_DIR/'"

    [[ "$QUIET" == true ]] && cmd="${cmd//-avh/-aq}"
    eval "$cmd"

    [[ "$DRY_RUN" == true ]] && log "⚠️  DRY-RUN - Nichts wurde verändert!"
    log "✓ Dotfiles kopiert: $PUBLIC_DIR → $TARGET_DIR"
}

git_hard_reset() {
    log "Git hard reset..."

    [[ ! -d "$PUBLIC_DIR/.git" ]] && fehler "Kein Git-Repository in $PUBLIC_DIR"

    cd "$PUBLIC_DIR"

    if [[ "$DRY_RUN" == true ]]; then
        log "⚠️  DRY-RUN Modus:"
        log "  Würde ausführen: git fetch origin"
        log "  Würde ausführen: git reset --hard origin/$GIT_BRANCH"
    else
        if [[ "$QUIET" == true ]]; then
            git fetch origin -q
            git reset --hard "origin/$GIT_BRANCH" -q
        else
            git fetch origin
            git reset --hard "origin/$GIT_BRANCH"
        fi
        log "✓ Reset auf origin/$GIT_BRANCH"
    fi

    if [[ "$FORCE" == false ]] && [[ "$DRY_RUN" == false ]]; then
        read -p "Hardlinks erstellen? [j/N]: " antwort
        [[ "$antwort" =~ ^[jJ]$ ]] && hardlinks_oeffentlich
    fi
}

entwickler_modus() {
    log "Entwickler-Modus..."

    validiere_verzeichnis "$PUBLIC_DIR" "Öffentliches Verzeichnis"
    erstelle_privates_verzeichnis

    # Schritt 1: Öffentliche
    log "→ Öffentliche Dotfiles"
    hardlinks_oeffentlich

    # Schritt 2: Private (falls vorhanden)
    local file_count=$(find "$PRIVATE_DIR" -type f ! -name "$MARKER_FILE" | wc -l)
    if [[ $file_count -gt 0 ]]; then
        log "→ Private Dotfiles"
        local cmd=$(baue_rsync_kommando "$PRIVATE_DIR" "$TARGET_DIR")
        [[ "$QUIET" == true ]] && cmd="${cmd//-avh/-aq}"
        eval "$cmd"
        [[ "$DRY_RUN" == true ]] && log "⚠️  DRY-RUN - Nichts wurde verändert!"
        log "✓ Private Dotfiles überschrieben"
    else
        log "Info: Keine privaten Dotfiles gefunden"
    fi
}

zeige_info() {
    cat << EOF

Dotfiles Manager v${VERSION}

Verzeichnisse:
  Öffentlich: $PUBLIC_DIR
  Privat:     $PRIVATE_DIR
  Ziel:       $TARGET_DIR

Marker-Datei: $MARKER_FILE

Ausgeschlossen:
  Git-Dateien, Lizenzen, Backups (*.bac, *.~*~)

EOF
}

zeige_hilfe() {
    cat << EOF
Dotfiles Manager v${VERSION}

VERWENDUNG:
    $(basename "$0") [OPTION] [FLAGS]

OPTIONEN:
    -d, --dev       Entwickler-Modus (öffentlich + privat)
    -r, --reset     Git hard reset
    -l, --link      Hardlinks (öffentlich)
    -c, --copy      Kopieren (ohne Hardlinks)
    -i, --info      Info anzeigen
    -h, --help      Diese Hilfe
    -v, --version   Version anzeigen

FLAGS:
    -q, --quiet     Minimale Ausgabe
    -f, --force     Keine Nachfragen
    -y              Alias für --force
    -n, --dry-run   Simulation (zeigt was passieren würde)

BEISPIELE:
    $(basename "$0") -d -f    # Entwickler-Modus ohne Nachfragen
    $(basename "$0") -r -q    # Git reset (quiet)
    $(basename "$0") -l -n    # Hardlinks simulieren (dry-run)
    $(basename "$0") -d -n    # Entwickler-Modus testen

Ohne Optionen: Interaktives Menü (fzf)

TIPP FÜR ANFÄNGER:
    Nutze -n (--dry-run) um zu sehen was passiert!
    Beispiel: $(basename "$0") -d -n

EOF
}

# Interaktives Menü mit fzf
interaktives_menu() {
    while true; do
        local auswahl=$(cat << 'MENU' | fzf \
            --height 50% \
            --reverse \
            --header "Dotfiles Manager v${VERSION} - ESC zum Beenden" \
            --prompt "> " \
            --preview-window=right:50%:wrap \
            --preview "case {} in
                \"Entwickler\"*)
                    echo \"ENTWICKLER-MODUS\"
                    echo \"===============\"
                    echo \"\"
                    echo \"Verlinkt BEIDE Dotfile-Sets:\"
                    echo \"1. Öffentliche Dotfiles (GitHub)\"
                    echo \"2. Private Dotfiles (lokal)\"
                    echo \"\"
                    echo \"Private überschreiben öffentliche!\"
                    echo \"\"
                    echo \"⚠️  ACHTUNG: Überschreibt ALLES!\"
                    ;;
                \"Git\"*)
                    echo \"GIT HARD RESET\"
                    echo \"==============\"
                    echo \"\"
                    echo \"Setzt Repository zurück auf:\"
                    echo \"→ origin/$GIT_BRANCH\"
                    echo \"\"
                    echo \"Verwirft ALLE lokalen Änderungen!\"
                    echo \"Holt neueste Version vom Server.\"
                    echo \"\"
                    echo \"Optional: Hardlinks danach\"
                    ;;
                \"Hardlinks\"*)
                    echo \"HARDLINKS ERSTELLEN\"
                    echo \"===================\"
                    echo \"\"
                    echo \"Erstellt Hardlinks von:\"
                    echo \"→ $PUBLIC_DIR\"
                    echo \"\"
                    echo \"Nach:\"
                    echo \"→ $TARGET_DIR\"
                    echo \"\"
                    echo \"Nur öffentliche Dotfiles!\"
                    echo \"Spart Speicherplatz.\"
                    ;;
                \"Kopieren\"*)
                    echo \"DOTFILES KOPIEREN\"
                    echo \"=================\"
                    echo \"\"
                    echo \"Kopiert Dateien (keine Hardlinks)\"
                    echo \"Unabhängige Kopien im Home.\"
                    echo \"\"
                    echo \"Gut für:\"
                    echo \"• Andere Dateisysteme\"
                    echo \"• Wenn Hardlinks nicht möglich\"
                    ;;
                \"Info\"*)
                    echo \"INFORMATIONEN\"
                    echo \"=============\"
                    echo \"\"
                    echo \"Version: $VERSION\"
                    echo \"\"
                    echo \"Verzeichnisse:\"
                    echo \"• Öffentlich: $PUBLIC_DIR\"
                    echo \"• Privat: $PRIVATE_DIR\"
                    echo \"• Ziel: $TARGET_DIR\"
                    echo \"\"
                    echo \"Nutze Flags für Automatisierung!\"
                    ;;
                *)
                    echo \"Wähle eine Option\"
                    echo \"\"
                    echo \"Navigation:\"
                    echo \"• ↑/↓ oder j/k: Bewegen\"
                    echo \"• Enter: Auswählen\"
                    echo \"• ESC: Beenden\"
                    ;;
            esac"
Entwickler-Modus (öffentlich + privat)
Git Hard Reset
Hardlinks erstellen (öffentlich)
Kopieren (ohne Hardlinks)
Info anzeigen
Beenden
MENU
        )

        case "$auswahl" in
            "Entwickler"*) entwickler_modus ;;
            "Git"*) git_hard_reset ;;
            "Hardlinks"*) hardlinks_oeffentlich ;;
            "Kopieren"*) kopiere_dotfiles ;;
            "Info"*) zeige_info; read -p "Enter drücken..." ;;
            "Beenden"|"") exit 0 ;;
        esac

        [[ "$auswahl" != "Info"* && "$auswahl" != "" ]] && read -p "Enter drücken..."
    done
}

# Hauptprogramm
main() {
    # Ohne Argumente -> Menü
    [[ $# -eq 0 ]] && {
        command -v fzf &>/dev/null || fehler "fzf nicht gefunden. Nutze Flags oder installiere fzf."
        interaktives_menu
    }

    # Parse Argumente
    while [[ $# -gt 0 ]]; do
        case $1 in
            -d|--dev)
                entwickler_modus
                exit 0
                ;;
            -r|--reset)
                git_hard_reset
                exit 0
                ;;
            -l|--link)
                hardlinks_oeffentlich
                exit 0
                ;;
            -c|--copy)
                kopiere_dotfiles
                exit 0
                ;;
            -i|--info)
                zeige_info
                exit 0
                ;;
            -h|--help)
                zeige_hilfe
                exit 0
                ;;
            -v|--version)
                echo "Dotfiles Manager v${VERSION}"
                exit 0
                ;;
            -q|--quiet)
                QUIET=true
                shift
                ;;
            -f|--force|-y)
                FORCE=true
                shift
                ;;
            -n|--dry-run)
                DRY_RUN=true
                shift
                ;;
            *)
                fehler "Unbekannte Option: $1"
                ;;
        esac
    done
}

# Prüfe rsync
command -v rsync &>/dev/null || fehler "rsync nicht installiert"

# Los gehts
main "$@"
