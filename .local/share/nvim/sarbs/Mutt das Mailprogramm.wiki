= Einrichtung und Nutzung von Mutt =

=== Packete instalieren (in SARBS bereits instaliert) ===
{{{class="brush: bash"
sudo pacman -S neomutt isync msmtp
yay -S mutt-wizard-git
}}}
GPG für Pass einrichten
{{{class="brush: bash"
gpg --full-generate-key
User-ID			"Pass PGP-Schlüssel"
Kommentar		"PGP Schlüssel für Pass-Passwortmanager"
Passwort		"*******"
}}}

oder vorhandene Schlüssel importieren
{{{class="brush: bash"
gpg --import privat-key.asc
gpg --import public-key.asc
}}}

# Finde die Key-ID raus

{{{
gpg --list-secret-keys
# Du siehst sowas wie: rsa4096/ABCD1234EFGH5678
}}}

== PGP Schlüssel Exportieren ==
{{{
gpg --armor --export-secret-keys DEINE-PGP-KEY-ID > pass-private.asc
gpg --armor --export DEINE-PGP-KEY-ID > pass-public.asc
# Später importieren mit
gpg --import *.asc
}}}

Pass mit der erstellten oder importierten PGP Schlüssel Initiieren
{{{class="brush: bash"
pass init "DEINE-PGP-KEY-ID"
}}}

Mutt Wizzard
{{{class="brush: bash"
mw -a deine@e.mail
}}}

=== Bedienung Neomutt ===
`i+1`   Postfach *1* auswählen
`y`     Mailbox auswählen




=== Verbindung zur Mailbox anpassen ===

Notice: SSLType is deprecated. Use TLSType instead.
nvim ~/.config/mbsync/config
alle *SSLType* gegen *TLSType* austauschen

Namen der angezeigt werden soll, ändern
{{{
v /home/sergi/.config/mutt/accounts/esf35@posteo.de.muttrc
set real_name = "Sergius"
set from = "sergius@posteo.de"
}}}

== PamGnuPG einrichten ==
Installieren der notwendigen Pakete (bei Sarbs bereits vorinstaliert)
{{{
sudo pacman -S pam-gnupg
}}}

GnuPG Agent konfigurieren
/home/sergi/.local/share/gnupg/gpg-agent.conf


== GPG-Schlüssel für  Mailverschlüsselung einrichten ==

gpg --full-gen-key

=== KEY_ID herausfinden ===

{{{
gpg --list-secret-keys --keyid-format 0xLONG
}}}

die key_id fängt mit *0x* an (für neomutt zu bevorzugen)

=== ~/.config/mutt/muttrc beabreiten ===

key_id in die *~/.config/mutt/accounts/mail@posteo.de.muttrc* eintragen

{{{
# Der E-Mail-Verschlüsselungsschlüssel
set crypt_use_gpgme = no  # Nutze klassisches GPG
set pgp_default_key = "0xDEIN_EMAIL_KEY_ID"
set pgp_sign_as = "0xDEIN_EMAIL_KEY_ID"
set pgp_self_encrypt = yes
set pgp_self_encrypt_as = "0xDEIN_EMAIL_KEY_ID"

# Auto-sign/encrypt Optionen
set crypt_autosign = yes           # Signiere alle Mails
set crypt_opportunistic_encrypt = yes  # Verschlüssle wenn möglich
set crypt_replyencrypt = yes       # Verschlüssle Antworten auf verschlüsselte Mails
set crypt_replysign = yes          # Signiere Antworten auf signierte Mails
set crypt_replysignencrypted = yes # Signiere Antworten auf verschlüsselte Mails

# GPG-Agent nutzen
set pgp_use_gpg_agent = yes
}}}

== Test ==

{{{
gpg-connect-agent /bye
gpg-connect-agent RELOADAGENT /bye
echo "test" | gpg --clearsign --local-user 0x25CF561BD806D1A9
echo "test" | gpg --clearsign --local-user sergius@posteo.de
}}}
